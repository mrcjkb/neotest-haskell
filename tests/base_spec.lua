local base = require('neotest-haskell.base')
local Path = require('plenary.path')

local simple_cabal_directory = Path:new('tests/fixtures/hspec/cabal/simple/')
local multi_package_cabal_directory = Path:new('tests/fixtures/hspec/cabal/multi-package/')
local simple_stack_directory = Path:new('tests/fixtures/hspec/stack/simple/')
local simple_stack_directory_only_package_yaml = Path:new('tests/fixtures/hspec/stack/simple-package-yaml/')
local multi_package_stack_directory = Path:new('tests/fixtures/hspec/stack/multi-package/')
describe('base', function()
  describe('select_build_tool', function()
    it('fails if an unknown build tool is specified', function()
      assert.errors(function()
        base.select_build_tool(simple_cabal_directory.filename, { 'unknown' })
      end)
    end)
    describe('simple project without stack.yaml', function()
      it('uses cabal if it is in the list of build tools', function()
        local build_tool = base.select_build_tool(simple_cabal_directory.filename, { 'stack', 'cabal' })
        assert.equals(build_tool.build_tool, 'cabal')
        assert.equals(build_tool.is_multi_package_project, false)
        assert.equals(build_tool.project_root, simple_cabal_directory.filename)
        assert.equals(build_tool.package_root, simple_cabal_directory.filename)
      end)
      it('throws if only stack is specified', function()
        assert.errors(function()
          base.select_build_tool(simple_cabal_directory.filename, { 'stack' })
        end)
      end)
      it('throws if no build tool is specified', function()
        assert.errors(function()
          base.select_build_tool(simple_cabal_directory.filename, {})
        end)
      end)
    end)

    describe('multi-package project without stack.yaml', function()
      it('uses cabal if it is in the list of build tools', function()
        local subpackage1_directory = Path:new(multi_package_cabal_directory.filename, 'subpackage1')
        local build_tool = base.select_build_tool(subpackage1_directory.filename, { 'stack', 'cabal' })
        assert.equals(build_tool.build_tool, 'cabal')
        assert.equals(build_tool.is_multi_package_project, true)
        assert.equals(build_tool.project_root, multi_package_cabal_directory:absolute())
        assert.equals(build_tool.package_root, subpackage1_directory.filename)
      end)
      it('throws if only stack is specified', function()
        assert.errors(function()
          base.select_build_tool(multi_package_cabal_directory.filename, { 'stack' })
        end)
      end)
      it('throws if no build tool is specified', function()
        assert.errors(function()
          base.select_build_tool(multi_package_cabal_directory.filename, {})
        end)
      end)
    end)

    describe('simple project with stack.yaml', function()
      it('uses stack if it is in the list of build tools before cabal', function()
        local build_tool = base.select_build_tool(simple_stack_directory.filename, { 'stack', 'cabal' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, false)
        assert.equals(build_tool.project_root, simple_stack_directory.filename)
        assert.equals(build_tool.package_root, simple_stack_directory.filename)
      end)
      it('uses stack if it is the only build tool', function()
        local build_tool = base.select_build_tool(simple_stack_directory.filename, { 'stack' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, false)
        assert.equals(build_tool.project_root, simple_stack_directory.filename)
        assert.equals(build_tool.package_root, simple_stack_directory.filename)
      end)
    end)
    it('throws if no build tool is specified', function()
      assert.errors(function()
        base.select_build_tool('.', {})
      end)
    end)

    describe('simple project with stack.yaml, package.yaml and no *.cabal', function()
      it('uses stack if it is in the list of build tools before cabal', function()
        local build_tool =
          base.select_build_tool(simple_stack_directory_only_package_yaml.filename, { 'stack', 'cabal' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, false)
        assert.equals(build_tool.project_root, simple_stack_directory_only_package_yaml.filename)
        assert.equals(build_tool.package_root, simple_stack_directory_only_package_yaml.filename)
      end)
      it('uses stack if it is the only build tool', function()
        local build_tool = base.select_build_tool(simple_stack_directory_only_package_yaml.filename, { 'stack' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, false)
        assert.equals(build_tool.project_root, simple_stack_directory_only_package_yaml.filename)
        assert.equals(build_tool.package_root, simple_stack_directory_only_package_yaml.filename)
      end)
    end)
    it('throws if no build tool is specified', function()
      assert.errors(function()
        base.select_build_tool('.', {})
      end)
    end)

    describe('multi-package project with stack.yaml', function()
      it('uses stack if it is in the list of build tools before cabal', function()
        local subpackage1_directory = Path:new(multi_package_stack_directory, 'subpackage1')
        local build_tool = base.select_build_tool(subpackage1_directory.filename, { 'stack', 'cabal' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, true)
        assert.equals(build_tool.project_root, multi_package_stack_directory:absolute())
        assert.equals(build_tool.package_root, subpackage1_directory.filename)
      end)
      it('uses stack if it is the only build tool', function()
        local subpackage2_directory = Path:new(multi_package_stack_directory, 'subpackage2')
        local build_tool = base.select_build_tool(subpackage2_directory.filename, { 'stack' })
        assert.equals(build_tool.build_tool, 'stack')
        assert.equals(build_tool.is_multi_package_project, true)
        assert.equals(build_tool.project_root, multi_package_stack_directory:absolute())
        assert.equals(build_tool.package_root, subpackage2_directory.filename)
      end)
    end)
    it('throws if no build tool is specified', function()
      assert.errors(function()
        base.select_build_tool('.', {})
      end)
    end)
  end)
end)
